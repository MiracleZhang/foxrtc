/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#import <Foundation/Foundation.h>
#include <stdlib.h>
#include <string.h>


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) { /*throw exception*/ return nullreturn; } else


/* Support for throwing Objc exceptions */
typedef enum {
  SWIG_ObjcOutOfMemoryError = 1, 
  SWIG_ObjcIOException, 
  SWIG_ObjcRuntimeException, 
  SWIG_ObjcIndexOutOfBoundsException,
  SWIG_ObjcArithmeticException,
  SWIG_ObjcIllegalArgumentException,
  SWIG_ObjcNullPointerException,
  SWIG_ObjcDirectorPureVirtual,
  SWIG_ObjcUnknownError
} SWIG_ObjcExceptionCodes;

typedef struct {
  SWIG_ObjcExceptionCodes code;
  const char *Objc_exception;
} SWIG_ObjcExceptions_t;


static void SWIGUNUSED SWIG_ObjcThrowException(SWIG_ObjcExceptionCodes code, const char *msg) {
  static const SWIG_ObjcExceptions_t Objc_exceptions[] = {
    { SWIG_ObjcOutOfMemoryError, "OutOfMemoryError" },
    { SWIG_ObjcIOException, "IOException" },
    { SWIG_ObjcRuntimeException, "RuntimeException" },
    { SWIG_ObjcIndexOutOfBoundsException, "IndexOutOfBoundsException" },
    { SWIG_ObjcArithmeticException, "ArithmeticException" },
    { SWIG_ObjcIllegalArgumentException, "IllegalArgumentException" },
    { SWIG_ObjcNullPointerException, "NullPointerException" },
    { SWIG_ObjcDirectorPureVirtual, "RuntimeException" },
    { SWIG_ObjcUnknownError,  "UnknownError" },
    { (SWIG_ObjcExceptionCodes)0,  "UnknownError" }
  };
  const SWIG_ObjcExceptions_t *except_ptr = Objc_exceptions;
  while (except_ptr->code != code && except_ptr->code)
   except_ptr++;
}

#include "foxrtc_wrap.h"

#include "../interface/foxrtc.h"


#include <stdexcept>


#include <vector>
#include <stdexcept>
struct DataWrapper
{
    const void* data;
    unsigned long len;
};


#include <string>


#ifdef __cplusplus
extern "C" {
#endif

void* _wrap_new_FoxrtcTransport()
{
  void* imresult = 0 ;
  FoxrtcTransport *result = 0 ;
  
  result = (FoxrtcTransport *)new FoxrtcTransport();
  imresult = (void*)result; 
  return imresult;
}

void _wrap_delete_FoxrtcTransport(void* imarg1)
{
  FoxrtcTransport *arg1 = (FoxrtcTransport *) 0 ;
  
  arg1 = (FoxrtcTransport *)imarg1; 
  delete arg1;
}

int _wrap_FoxrtcTransport_SendRtp(void* imarg1, NSString * imarg2, int imarg3)
{
  FoxrtcTransport *arg1 = (FoxrtcTransport *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (FoxrtcTransport *)imarg1; 
  {
    arg2 = 0;
    if (imarg2) {
      // TODO: Find a better way to do this!
      int length = [imarg2 length];
      int bufferSize = sizeof(char) * (length + 1);
      char *buffer = (char*)malloc(bufferSize);
      memset(buffer, 0, bufferSize);
      int i = 0;
      for (; i < length; ++i)
      buffer[i] = [imarg2 characterAtIndex: i];
      arg2 = (char *)buffer;
    }
  }
  arg3 = (int)imarg3; 
  result = (int)(arg1)->SendRtp((char const *)arg2,arg3);
  imresult = result; 
  return imresult;
}

int _wrap_FoxrtcTransport_SendRtcp(void* imarg1, NSString * imarg2, int imarg3)
{
  FoxrtcTransport *arg1 = (FoxrtcTransport *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (FoxrtcTransport *)imarg1; 
  {
    arg2 = 0;
    if (imarg2) {
      // TODO: Find a better way to do this!
      int length = [imarg2 length];
      int bufferSize = sizeof(char) * (length + 1);
      char *buffer = (char*)malloc(bufferSize);
      memset(buffer, 0, bufferSize);
      int i = 0;
      for (; i < length; ++i)
      buffer[i] = [imarg2 characterAtIndex: i];
      arg2 = (char *)buffer;
    }
  }
  arg3 = (int)imarg3; 
  result = (int)(arg1)->SendRtcp((char const *)arg2,arg3);
  imresult = result; 
  return imresult;
}

void _wrap_delete_Foxrtc(void* imarg1)
{
  Foxrtc *arg1 = (Foxrtc *) 0 ;
  
  arg1 = (Foxrtc *)imarg1; 
  delete arg1;
}

void* _wrap_Foxrtc_Instance()
{
  void* imresult = 0 ;
  Foxrtc *result = 0 ;
  
  result = (Foxrtc *) &Foxrtc::Instance();
  imresult = (void*)result; 
  return imresult;
}

int _wrap_Foxrtc_Init(void* imarg1, void* imarg2)
{
  Foxrtc *arg1 = (Foxrtc *) 0 ;
  FoxrtcTransport *arg2 = (FoxrtcTransport *) 0 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (Foxrtc *)imarg1; 
  arg2 = (FoxrtcTransport *)imarg2; 
  result = (int)(arg1)->Init(arg2);
  imresult = result; 
  return imresult;
}

int _wrap_Foxrtc_Uninit(void* imarg1)
{
  Foxrtc *arg1 = (Foxrtc *) 0 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (Foxrtc *)imarg1; 
  result = (int)(arg1)->Uninit();
  imresult = result; 
  return imresult;
}

int _wrap_Foxrtc_GetDeviceInfo(void* imarg1)
{
  Foxrtc *arg1 = (Foxrtc *) 0 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (Foxrtc *)imarg1; 
  result = (int)(arg1)->GetDeviceInfo();
  imresult = result; 
  return imresult;
}

int _wrap_Foxrtc_OpenCamera(void* imarg1, int imarg2)
{
  Foxrtc *arg1 = (Foxrtc *) 0 ;
  int arg2 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (Foxrtc *)imarg1; 
  arg2 = (int)imarg2; 
  result = (int)(arg1)->OpenCamera(arg2);
  imresult = result; 
  return imresult;
}

int _wrap_Foxrtc_CloseCamera(void* imarg1)
{
  Foxrtc *arg1 = (Foxrtc *) 0 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (Foxrtc *)imarg1; 
  result = (int)(arg1)->CloseCamera();
  imresult = result; 
  return imresult;
}

int _wrap_Foxrtc_CreateLocalAudioStream(void* imarg1, unsigned int imarg2)
{
  Foxrtc *arg1 = (Foxrtc *) 0 ;
  unsigned int arg2 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (Foxrtc *)imarg1; 
  arg2 = (unsigned int)imarg2; 
  result = (int)(arg1)->CreateLocalAudioStream(arg2);
  imresult = result; 
  return imresult;
}

int _wrap_Foxrtc_DeleteLocalAudioStream(void* imarg1)
{
  Foxrtc *arg1 = (Foxrtc *) 0 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (Foxrtc *)imarg1; 
  result = (int)(arg1)->DeleteLocalAudioStream();
  imresult = result; 
  return imresult;
}

int _wrap_Foxrtc_CreateRemoteAudioStream(void* imarg1, unsigned int imarg2)
{
  Foxrtc *arg1 = (Foxrtc *) 0 ;
  unsigned int arg2 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (Foxrtc *)imarg1; 
  arg2 = (unsigned int)imarg2; 
  result = (int)(arg1)->CreateRemoteAudioStream(arg2);
  imresult = result; 
  return imresult;
}

int _wrap_Foxrtc_DeleteRemoteAudioStream(void* imarg1)
{
  Foxrtc *arg1 = (Foxrtc *) 0 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (Foxrtc *)imarg1; 
  result = (int)(arg1)->DeleteRemoteAudioStream();
  imresult = result; 
  return imresult;
}

int _wrap_Foxrtc_CreateLocalVideoStream(void* imarg1, int imarg2, void* imarg3)
{
  Foxrtc *arg1 = (Foxrtc *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (Foxrtc *)imarg1; 
  arg2 = (int)imarg2; 
  arg3 = (void *)imarg3; 
  result = (int)(arg1)->CreateLocalVideoStream(arg2,arg3);
  imresult = result; 
  return imresult;
}

int _wrap_Foxrtc_DeleteLocalVideoStream(void* imarg1)
{
  Foxrtc *arg1 = (Foxrtc *) 0 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (Foxrtc *)imarg1; 
  result = (int)(arg1)->DeleteLocalVideoStream();
  imresult = result; 
  return imresult;
}

int _wrap_Foxrtc_CreateRemoteVideoStream(void* imarg1, int imarg2, void* imarg3)
{
  Foxrtc *arg1 = (Foxrtc *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (Foxrtc *)imarg1; 
  arg2 = (int)imarg2; 
  arg3 = (void *)imarg3; 
  result = (int)(arg1)->CreateRemoteVideoStream(arg2,arg3);
  imresult = result; 
  return imresult;
}

int _wrap_Foxrtc_DeleteRemoteVideoStream(void* imarg1)
{
  Foxrtc *arg1 = (Foxrtc *) 0 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (Foxrtc *)imarg1; 
  result = (int)(arg1)->DeleteRemoteVideoStream();
  imresult = result; 
  return imresult;
}

int _wrap_Foxrtc_IncomingData(void* imarg1, NSString * imarg2, int imarg3)
{
  Foxrtc *arg1 = (Foxrtc *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int imresult = 0 ;
  int result;
  
  arg1 = (Foxrtc *)imarg1; 
  {
    arg2 = 0;
    if (imarg2) {
      // TODO: Find a better way to do this!
      int length = [imarg2 length];
      int bufferSize = sizeof(char) * (length + 1);
      char *buffer = (char*)malloc(bufferSize);
      memset(buffer, 0, bufferSize);
      int i = 0;
      for (; i < length; ++i)
      buffer[i] = [imarg2 characterAtIndex: i];
      arg2 = (char *)buffer;
    }
  }
  arg3 = (int)imarg3; 
  result = (int)(arg1)->IncomingData((char const *)arg2,arg3);
  imresult = result; 
  return imresult;
}



#ifdef __cplusplus
}
#endif
